<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Interlines - Git</title><link href="https://alexsavio.github.io/" rel="alternate"></link><link href="https://alexsavio.github.io/feeds/git.atom.xml" rel="self"></link><id>https://alexsavio.github.io/</id><updated>2019-06-11T12:00:00+02:00</updated><subtitle>Lost in spikes</subtitle><entry><title>Git usage guidelines for team collaboration</title><link href="https://alexsavio.github.io/git-collaboration-guidelines.html" rel="alternate"></link><published>2019-06-11T12:00:00+02:00</published><updated>2019-06-11T12:00:00+02:00</updated><author><name>Alexandre M. Savio</name></author><id>tag:alexsavio.github.io,2019-06-11:/git-collaboration-guidelines.html</id><summary type="html">&lt;p&gt;Suggestions on how to use a code repository with git for&amp;nbsp;teams.&lt;/p&gt;</summary><content type="html">&lt;h2&gt;Introduction&lt;/h2&gt;
&lt;p&gt;This is a set of rules that I have been gathering in the past few years, which work well for most of the projects I worked on with small teams of 3-8 people. These guidelines are heavily based on the &lt;a href="https://github.com/angular/angular.js/blob/master/DEVELOPERS.md#-git-commit-guidelines"&gt;angular.js/&lt;span class="caps"&gt;DEVELOPERS&lt;/span&gt;.md document on  GitHub&lt;/a&gt;.
This is not about &lt;a href="https://www.atlassian.com/git/tutorials/comparing-workflows/gitflow-workflow"&gt;GitFlow&lt;/a&gt;, I think it is too complex and goes against fast development cycles. Build good and reliable &lt;span class="caps"&gt;CI&lt;/span&gt;/&lt;span class="caps"&gt;CD&lt;/span&gt; pipelines to be able to deliver faster, use canary releases whenever&amp;nbsp;possible.&lt;/p&gt;
&lt;h2&gt;Branching&amp;nbsp;model&lt;/h2&gt;
&lt;p&gt;Always create a new branch from an updated &amp;#8220;master&amp;#8221; branch.
The branches should have a short life (no more than 2 days) and have a very determined objective.
Once the objective is reached, a Pull Request (&lt;span class="caps"&gt;PR&lt;/span&gt;) should be created to merge the branch to “master”.
Once the branch is merged, it should be deleted.
Always merge to&amp;nbsp;“master”.&lt;/p&gt;
&lt;h3&gt;Branch&amp;nbsp;names&lt;/h3&gt;
&lt;p&gt;The branch names are not that important in very small teams, but when the team is bigger or work remotely,
a pattern for the branch names is also good to follow. Here is a&amp;nbsp;suggestion:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;/&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;ticket_id&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;subject&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Some tools like Sourcetree from Atlassian pick the &lt;code&gt;/&lt;/code&gt; from the branch name and splits the name in their &lt;span class="caps"&gt;GUI&lt;/span&gt;,
so you can see the different types of branches as in different&amp;nbsp;folders.&lt;/p&gt;
&lt;h4&gt;Type&lt;/h4&gt;
&lt;p&gt;The &lt;type&gt; describes the generic objective of the branch, it can be one of the&amp;nbsp;following:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;feat&lt;/strong&gt;: a new&amp;nbsp;feature,&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;fix&lt;/strong&gt;: a bug&amp;nbsp;fix,&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;docs&lt;/strong&gt;: documentation only changes (in or out of the&amp;nbsp;code),&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;tests&lt;/strong&gt;: new tests or fixes in&amp;nbsp;tests,&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;refactor&lt;/strong&gt;: code change that neither fixes a bug or adds a&amp;nbsp;feature,&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;style&lt;/strong&gt;: code changes that&amp;nbsp;neither,&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;chore&lt;/strong&gt;: Changes to the build process or auxiliary tools for the project&amp;nbsp;maintenance,&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;perf&lt;/strong&gt;: A code change that improves&amp;nbsp;performance.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Ticket &lt;span class="caps"&gt;ID&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;This is optional, but is good if the purpose of the branch is too complex or if you follow a Scrum development process.
The &lt;ticket_id&gt; should be the identifier of the ticket or user story that the branch is going to solve.
The format depends on the project management tool you are using, but usually it has a project acronym and a number: &lt;code&gt;PRJ_123&lt;/code&gt;.&lt;/p&gt;
&lt;h4&gt;Subject&lt;/h4&gt;
&lt;p&gt;The &lt;subject&gt; part should be no more than 3 or 4 words about the specific objective of the branch.
If you don’t put a ticket &lt;span class="caps"&gt;ID&lt;/span&gt;, the specificity of the name is more&amp;nbsp;relevant.&lt;/p&gt;
&lt;h3&gt;Commit&amp;nbsp;messages&lt;/h3&gt;
&lt;p&gt;Here we follow a very specific pattern in order to be able to parse the commit messages to automatically generate a
change log for each release in a &lt;span class="caps"&gt;CI&lt;/span&gt;/&lt;span class="caps"&gt;CD&lt;/span&gt; process and also semantic release version bumps
with tools like semantic-release (available for Node.js and&amp;nbsp;Python).&lt;/p&gt;
&lt;h4&gt;Format&lt;/h4&gt;
&lt;p&gt;Each commit message consists of a header, a body and a footer. The header has a special format that includes a type, a scope and a&amp;nbsp;subject:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;scope&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;subject&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;BLANK&lt;/span&gt; &lt;span class="n"&gt;LINE&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;body&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;BLANK&lt;/span&gt; &lt;span class="n"&gt;LINE&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;footer&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The header is mandatory and the scope of the header is optional.
Any line of the commit message cannot be longer 100 characters!
This allows the message to be easier to read on GitHub as well as in various git&amp;nbsp;tools.&lt;/p&gt;
&lt;h5&gt;Type&lt;/h5&gt;
&lt;p&gt;The &lt;type&gt; describes the generic objective of the commit, use the same types used for&amp;nbsp;branches.&lt;/p&gt;
&lt;h5&gt;Scope&lt;/h5&gt;
&lt;p&gt;The &lt;scope&gt; could be anything specifying place of the commit change. A scope should be a part of the project that the stakeholders understand.
The possible scopes can be agreed beforehand with the developers and/or stakeholders.
You can use * when the change affects more than a single scope, but you can also not put anything (remove the parentheses as&amp;nbsp;well).&lt;/p&gt;
&lt;h5&gt;Subject&lt;/h5&gt;
&lt;p&gt;The &lt;subject&gt; contains succinct description of the change:
- use the imperative, present tense: &amp;#8220;change&amp;#8221; not &amp;#8220;changed&amp;#8221; nor &amp;#8220;changes&amp;#8221;
- don&amp;#8217;t capitalize first letter
- no dot (.) at the end
Don’t use generic subjects as: &amp;#8216;debug&amp;#8217; or &amp;#8216;few fixes&amp;#8217;. Be clear and&amp;nbsp;specific.&lt;/p&gt;
&lt;h5&gt;Body&lt;/h5&gt;
&lt;p&gt;The &lt;body&gt; is optional, but if you use it, just as in the subject, use the imperative, present tense: &amp;#8220;change&amp;#8221; not &amp;#8220;changed&amp;#8221; nor &amp;#8220;changes&amp;#8221;.
The body should include the motivation for the change and contrast
this with the previous&amp;nbsp;behavior.&lt;/p&gt;
&lt;h5&gt;Footer&lt;/h5&gt;
&lt;p&gt;The &lt;footer&gt; is optional. The footer should contain any information about Breaking Changes and is also the place to reference GitHub issues that this commit closes.
Breaking Changes should start with the word &lt;span class="caps"&gt;BREAKING&lt;/span&gt; &lt;span class="caps"&gt;CHANGE&lt;/span&gt;: with a space or two newlines. The rest of the commit message is then used for this.
A detailed explanation can be found in the Angular.js&amp;nbsp;document.&lt;/p&gt;
&lt;h3&gt;Pull&amp;nbsp;Requests&lt;/h3&gt;
&lt;p&gt;The Pull or Merge Requests (&lt;span class="caps"&gt;PR&lt;/span&gt;) are used to share with your co-developers the code changes
you did in your branch and ask them to review it. Here we always do a &lt;span class="caps"&gt;PR&lt;/span&gt; from your branch to
the &amp;#8216;master&amp;#8217; branch.
In a &lt;span class="caps"&gt;PR&lt;/span&gt;, your colleagues will have a view of the differences between the branches and the
commits. You must also add a title and a description.
The title should be sufficient to understand what is being changed. In the description you should:
- make a useful description,
- describe what was changed in the pull request,
- explain why this &lt;span class="caps"&gt;PR&lt;/span&gt; exists,
- make it clear how it does what it sets out to do. E.g: Does it change a column in the database?
How is this being done? What happens to the old data?
- you may want to use screenshots to demonstrate what has changed if there is a
&lt;span class="caps"&gt;GUI&lt;/span&gt; involved in the&amp;nbsp;project.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Pull request size:&lt;/strong&gt; It should be small. The pull request must have a maximum of 250 lines of change.
&lt;strong&gt;Feature breaking:&lt;/strong&gt; Whenever it’s possible break pull requests into smaller ones.
&lt;strong&gt;Single Responsibility Principle:&lt;/strong&gt; The pull request should do only 1&amp;nbsp;thing.&lt;/p&gt;
&lt;h3&gt;&lt;span class="caps"&gt;CI&lt;/span&gt;/&lt;span class="caps"&gt;CD&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;With this setup your &lt;span class="caps"&gt;CI&lt;/span&gt;/&lt;span class="caps"&gt;CD&lt;/span&gt; pipeline would:
1. run your checks and tests for every push to a &lt;span class="caps"&gt;PR&lt;/span&gt; and every merge to &amp;#8216;master&amp;#8217;,
2. run a deployment to your test environment every merge to &amp;#8216;master&amp;#8217;, and
3. enable a manual deployment to your production environment for every merge to &amp;#8216;master&amp;#8217;.
This deployment should trigger a release first, with automatic version bumping
and change log generation. Bitbucket-pipelines supports&amp;nbsp;this.&lt;/p&gt;
&lt;h3&gt;&lt;span style="color:red"&gt;Remember: git is a collaboration tool, not a reporting&amp;nbsp;tool.&lt;/span&gt;&lt;/h3&gt;
&lt;h3&gt;References&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://medium.com/@hugooodias/the-anatomy-of-a-perfect-pull-request-567382bb6067"&gt;The anatomy of a perfect pull request – Hugo Dias –&amp;nbsp;Medium&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.conventionalcommits.org/en/v1.0.0-beta.4/#specification"&gt;Conventional&amp;nbsp;Commits&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.atlassian.com/git/tutorials/comparing-workflows/gitflow-workflow"&gt;Gitflow Workflow | Atlassian Git&amp;nbsp;Tutorial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/angular/angular.js/blob/master/DEVELOPERS.md#-git-commit-guidelines"&gt;angular.js/&lt;span class="caps"&gt;DEVELOPERS&lt;/span&gt;.md at master · angular/angular.js ·&amp;nbsp;GitHub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/semantic-release/semantic-release"&gt;GitHub - semantic-release/semantic-release: Fully automated version management and package&amp;nbsp;publishing&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="Git"></category><category term="git"></category><category term="collaboration"></category><category term="team"></category></entry><entry><title>Remove big files from a git repository</title><link href="https://alexsavio.github.io/git-cleanup-bfg.html" rel="alternate"></link><published>2017-12-30T12:28:00+01:00</published><updated>2017-12-30T12:28:00+01:00</updated><author><name>Alexandre M. Savio</name></author><id>tag:alexsavio.github.io,2017-12-30:/git-cleanup-bfg.html</id><summary type="html">&lt;p&gt;Remove large blobs from your git repository&amp;nbsp;history&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Introduction&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://rtyley.github.io/bfg-repo-cleaner/"&gt;&lt;span class="caps"&gt;BFG&lt;/span&gt; Repo-Cleaner&lt;/a&gt; is a tool to &amp;#8220;remove large or troublesome blobs&amp;#8221; from Git&amp;nbsp;repositories.&lt;/p&gt;
&lt;p&gt;Here goes a quick guide on how to remove files larger than 10&amp;nbsp;MiB.&lt;/p&gt;
&lt;h3&gt;Installation&lt;/h3&gt;
&lt;p&gt;Download the lastest release from https://rtyley.github.io/bfg-repo-cleaner/.
It includes a &lt;code&gt;.jar&lt;/code&gt; file which we will use through the command&amp;nbsp;line.&lt;/p&gt;
&lt;p&gt;You can use &lt;code&gt;bfg&lt;/code&gt; as an alias for &lt;code&gt;java -jar ~/Software/bfg-1.12.16.jar&lt;/code&gt;.
Meaning that &amp;#8220;&lt;code&gt;~/Software/bfg-1.12.16.jar&lt;/code&gt;&amp;#8221; is wherever you downloaded the &lt;code&gt;.jar&lt;/code&gt; file.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;alias&lt;/span&gt; &lt;span class="nv"&gt;bfg&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;java -jar ~/Software/bfg-1.12.16.jar&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;First&amp;nbsp;step&lt;/h3&gt;
&lt;p&gt;First you must delete the blobs that you want to delete from the &lt;span class="caps"&gt;HEAD&lt;/span&gt; of your repository, commit, and&amp;nbsp;push.&lt;/p&gt;
&lt;h3&gt;Usage&lt;/h3&gt;
&lt;p&gt;Clone your repository in mirror&amp;nbsp;mode:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;git clone --mirror git://example.com/some-big-repo.git&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Run &lt;span class="caps"&gt;BFG&lt;/span&gt; to delete files bigger than 10MiB (see more examples in the project&amp;nbsp;documentation):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;bfg --strip-blobs-bigger-than 10M some-big-repo.git&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Prune the reference log entries and&amp;nbsp;push:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; some-big-repo.git&lt;/span&gt;
&lt;span class="code-line"&gt;git reflog expire --expire&lt;span class="o"&gt;=&lt;/span&gt;now --all &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; git gc --prune&lt;span class="o"&gt;=&lt;/span&gt;now --aggressive&lt;/span&gt;
&lt;span class="code-line"&gt;git push&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;References&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href="https://rtyley.github.io/bfg-repo-cleaner/"&gt;https://rtyley.github.io/bfg-repo-cleaner/&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;</content><category term="Git"></category><category term="git"></category><category term="clean"></category><category term="trash"></category></entry></feed>